#!/usr/bin/env bash

# Source Credentials --- Note that this is not secure and will leak
# Goal is just to keep them off github
source .env
echo "$BLUESKY_HANDLE"
echo "$BLUESKY_APP_PASSWORD"

source settings.sh
process="BSKY_FUNDRAISING_LINK_LABELER"
logfile=fundraising_link.log

log "Script started."

# Fetch the access JWT
log "Authenticating with Bluesky."
auth "$BLUESKY_HANDLE" "$BLUESKY_APP_PASSWORD"

# Initialize variables for rate limiting
LABEL_LIMIT_REMAINING=3000
LABEL_LIMIT_RESET=0

log2() {
    jq -nc --arg timestamp "$(date +"%s")" --arg date "$(date +"%Y-%m-%dT%H:%M:%S%z")" --arg did "$did" --arg url "$url" --arg link "$link" --arg cid "$cid" --arg rkey "$rkey" --arg whitelist "$whitelist" '{"timestamp": $timestamp, "date": $date, "level": "INFO", "did": $did, "url": $url, "uri": $link, "cid": $cid, "rkey": $rkey, "whitelist": $whitelist}'
}

# Function to process each post
function process_post() {
    local json="$1"

    facet=$(echo "$json" | jq '.record | has("facets")')
    if [ "$facet" = "true" ]; then
        type=$(echo "$json" | jq '[.record.facets[].features[] | select(."$type" == "app.bsky.richtext.facet#link")] | length > 0')
        if [ "$type" = "true" ]; then
            urls=$(echo "$json" | jq -r '
                .record.facets[]
                | .features[]
                | select(."$type" == "app.bsky.richtext.facet#link")
                | .uri')

            # Check if any URIs match the specified domains
            found=0
            for url in $urls; do
                if echo "$url" | grep -iE 'gofundme\.com|gofund\.me|ko-fi\.com|buymeacoffee\.com|venmo\.com|cash\.app|cash\.me|paypal\.com|paypal\.me' >/dev/null; then
                    found=1
                    echo "$json" >>flagged_posts.json
                    rkey=$(echo "$json" | jq -r '.rkey')
                    did=$(echo "$json" | jq -r '.did')
                    link=$(echo "$json" | jq -r '"at://" + .did + "/app.bsky.feed.post/" + .rkey')
                    cid=$(get_post_record "$did" "$rkey" | jq -r '.cid')

                    if [ -z "$cid" ]; then
                        log "CID is empty, continuing."
                        continue
                    else

                        whitelist=0
                        if echo "$did" | grep -iE 'did:plc:e2c3fpyix7y2nmhutzwawiuq|did:plc:x5o53myzrf7hr36tltzi645u|did:plc:vlpy6zuqqum5tumv7b6dw5fp|did:plc:36h6ttx2g23zqr4accilbvo7|did:plc:xs6m4zsrcmn5fyjanq6t4sg2' >/dev/null; then
                            whitelist=1
                            echo "$(log2)" >>flag_log.json
                            log "Fundraising link $url found at $link with CID $cid and whitelisted DID $did."
                            continue
                        elif echo "$url" | grep -iE 'ko-fi\.com/goodhead/shop|ko-fi\.com/kflstudios/shop|ko-fi\.com/s/3c3cbece91|ko-fi\.com/s/d33c50d04d|https://ko-fi\.com/newbabyfly/shop|ko-fi\.com/wheatart' >/dev/null; then
                            whitelist=1
                            echo "$(log2)" >>flag_log.json
                            log "Whitelisted $url found at $link with CID $cid and $did."
                            continue
                        else
                            log "Fundraising link $url found at $link with CID $cid."
                            echo "$(log2)" >>flag_log.json

                            # Create a label
                            check_rate_limit "$LABEL_LIMIT_REMAINING" "$LABEL_LIMIT_RESET"

                            create_label "$link" "$cid" "fundraising-link"
                            log "Label creation response: $response"
                            echo "$response" >>log.json
                            expiredJWT_Check "$response"

                            if [ "$tokenExpired" -eq 1 ]; then
                                create_label "$link" "$cid" "fundraising-link"
                                log "Label creation response after token refresh: $response"
                                echo "$response" >>log.json
                            fi
                            if [ "$tokenInvalid" -eq 1 ]; then
                                create_label "$link" "$cid" "fundraising-link"
                                log "Label creation response after token refresh: $response"
                                echo "$response" >>log.json
                            fi
                        fi
                    fi
                fi
                alt_tech=0
                if echo "$url" | grep -E 'givesendgo\.com' >/dev/null; then
                    alt_tech=1
                    echo "$json" >>flagged_posts-at.json
                    rkey=$(echo "$json" | jq -r '.rkey')
                    did=$(echo "$json" | jq -r '.did')
                    link=$(echo "$json" | jq -r '"at://" + .did + "/app.bsky.feed.post/" + .rkey')
                    cid=$(get_post_record "$did" "$rkey" | jq -r '.cid')

                    if [ -z "$cid" ]; then
                        log "CID is empty, continuing."
                        continue
                    else

                        whitelist=0
                        log "Alt-Tech Fundraising link $url found at $link with CID $cid."
                        echo "$(log2)" >>flag_log.json

                        # Create a label
                        check_rate_limit "$LABEL_LIMIT_REMAINING" "$LABEL_LIMIT_RESET"

                        create_label "$link" "$cid" "fundraising-link-at"
                        log "Label creation response: $response"
                        echo "$response" >>log-at.json
                        expiredJWT_Check "$response"

                        if [ "$tokenExpired" -eq 1 ]; then
                            create_label "$link" "$cid" "fundraising-link-at"
                            log "Label creation response after token refresh: $response"
                            echo "$response" >>log.json
                        fi
                        if [ "$tokenInvalid" -eq 1 ]; then
                            create_label "$link" "$cid" "fundraising-link-at"
                            log "Label creation response after token refresh: $response"
                            echo "$response" >>log.json
                        fi
                    fi
                fi
            done
        fi
    fi

}

# Stream records and process each one
websocat -t - autoreconnect:ws://localhost:6008/subscribe?wantedCollections=app.bsky.feed.post | while read -r post; do
    process_post "$post"
done
