#!/usr/bin/env bash

log() {
    echo "$(date) [$process]: $*" | tee -a "$LOGPATH/$logfile"
}

# Function to check and handle rate limiting
check_rate_limit() {
    local LIMIT_REMAINING=$1
    local LIMIT_RESET=$2

    if [ "$LIMIT_REMAINING" -le 10 ]; then
        current_time=$(date +%s)
        wait_time=$((LIMIT_RESET - current_time))
        if [ "$wait_time" -gt 0 ]; then
            echo "Rate limit exceeded. Waiting for $wait_time seconds."
            sleep "$wait_time"
        fi
    fi
}

# Create label
function create_profile_label() {
    local DID=$1
    local LBL=$2

    # Create temporary files to store headers and body
    tmp_headers=$(mktemp)
    tmp_body=$(mktemp)

    curl -v 'https://blewit.us-west.host.bsky.network/xrpc/tools.ozone.moderation.emitEvent' \
        -H 'accept: */*' \
        -H 'accept-language: en-US,en;q=0.9' \
        -H 'atproto-accept-labelers: did:plc:ar7c4by46qjdydhdevvrndac;redact' \
        -H 'atproto-proxy: did:plc:e4elbtctnfqocyfcml6h2lf7#atproto_labeler' \
        -H 'Accept-Encoding: identity' \
        -H "authorization: Bearer $accessJwt" \
        -H 'content-type: application/json' \
        -H 'origin: https://ozone.mountainherder.xyz' \
        -H 'priority: u=1, i' \
        -H 'referer: https://ozone.mountainherder.xyz/' \
        --data-raw "{\"subject\":{\"\$type\":\"com.atproto.admin.defs#repoRef\",\"did\":\"$DID\"},\"createdBy\":\"did:plc:e4elbtctnfqocyfcml6h2lf7\",\"subjectBlobCids\":[],\"event\":{\"\$type\":\"tools.ozone.moderation.defs#modEventLabel\",\"createLabelVals\":[\"$LBL\"],\"negateLabelVals\":[]}}" -o "$tmp_body" 2>"$tmp_headers"

    # Extract the rate limit information from the headers
    LABEL_LIMIT_REMAINING=$(grep -i "ratelimit-remaining" "$tmp_headers" | awk '{print $3}' | tr -d '\r')
    LABEL_LIMIT_RESET=$(grep -i "ratelimit-reset" "$tmp_headers" | awk '{print $3}' | tr -d '\r')

    # Print the rate limit values (optional)
    # Print the rate limit values (optional)
    log "Rate Limit Remaining: $LABEL_LIMIT_REMAINING"
    log "Rate Limit Reset Time: $LABEL_LIMIT_RESET"

    # Capture the response body
    response=$(cat "$tmp_body" | tr -d '\n')

    # Clean up the temporary files
    rm "$tmp_headers" "$tmp_body"

}

# Handle Expiration
function expiredJWT_Check() {
    local error=$(echo "$1" | jq -r '.error')
    tokenExpired=0
    tokenInvalid=0

    if [ "$error" = "ExpiredToken" ]; then
        tokenExpired=1
        log "Token expired, refreshing tokens."
        # Refresh the tokens
        auth=$(curl -s -X POST 'https://blewit.us-west.host.bsky.network/xrpc/com.atproto.server.refreshSession' \
            -H "Content-Type: application/json" \
            -H 'Accept-Encoding: identity' \
            -H "Authorization: Bearer $refreshJwt")

        # Update tokens
        accessJwt=$(echo "$auth" | jq -r '.accessJwt')
        refreshJwt=$(echo "$auth" | jq -r '.refreshJwt')
    fi
    if [ "$error" = "InvalidToken" ]; then
        tokenInvalid=1
        log "Token invalid, Authenticating with Bluesky."

        # Refresh the tokens
        auth "$BLUESKY_HANDLE" "$BLUESKY_APP_PASSWORD"
    fi
}

# Get profiles
function get_profiles {
    local DIDLIST=$1
    local process="GET_PROFILES"
    local params=$(echo "$DIDLIST" | jq -r 'map("actors=" + .[]) | join("&")')

    # Create temporary files to store headers and body
    tmp_headers=$(mktemp)
    tmp_body=$(mktemp)

    curl -v "https://blewit.us-west.host.bsky.network/xrpc/app.bsky.actor.getProfiles?$params" \
        -H "authorization: Bearer $accessJwt" \
        -H 'accept-encoding: identity' \
        -H 'accept: application/json' -o "$tmp_body" 2>"$tmp_headers"

    # Extract the rate limit information from the headers
    LABEL_LIMIT_REMAINING=$(grep -i "ratelimit-remaining" "$tmp_headers" | awk '{print $3}' | tr -d '\r')
    LABEL_LIMIT_RESET=$(grep -i "ratelimit-reset" "$tmp_headers" | awk '{print $3}' | tr -d '\r')

    # Print the rate limit values (optional)
    # Print the rate limit values (optional)
    log "Rate Limit Remaining: $LABEL_LIMIT_REMAINING"
    log "Rate Limit Reset Time: $LABEL_LIMIT_RESET"

    # Capture the response body
    response=$(cat "$tmp_body" | tr -d '\n')

    # Clean up the temporary files
    rm "$tmp_headers" "$tmp_body"
}

# Get Post Record
function get_post_record() {
    DID=$1
    RKEY=$2

    curl "https://blewit.us-west.host.bsky.network/xrpc/com.atproto.repo.getRecord?repo=$DID&collection=app.bsky.feed.post&rkey=$RKEY" \
        -H 'content-type: application/json' \
        -H 'accept-encoding: identity'
}

# Creates a label on a post
function create_label() {
    URI=$1
    CID=$2
    LBL=$3

    # Create temporary files to store headers and body
    tmp_headers=$(mktemp)
    tmp_body=$(mktemp)

    curl -v 'https://blewit.us-west.host.bsky.network/xrpc/tools.ozone.moderation.emitEvent' \
        -H 'accept: */*' \
        -H 'accept-language: en-US,en;q=0.9' \
        -H 'atproto-accept-labelers: did:plc:ar7c4by46qjdydhdevvrndac;redact' \
        -H 'atproto-proxy: did:plc:e4elbtctnfqocyfcml6h2lf7#atproto_labeler' \
        -H 'Accept-Encoding: identity' \
        -H "authorization: Bearer $accessJwt" \
        -H 'content-type: application/json' \
        -H 'origin: https://ozone.mountainherder.xyz' \
        -H 'priority: u=1, i' \
        -H 'referer: https://ozone.mountainherder.xyz/' \
        --data-raw "{\"subject\":{\"\$type\":\"com.atproto.repo.strongRef\",\"uri\":\"$URI\",\"cid\":\"$CID\"},\"createdBy\":\"did:plc:e4elbtctnfqocyfcml6h2lf7\",\"subjectBlobCids\":[],\"event\":{\"\$type\":\"tools.ozone.moderation.defs#modEventLabel\",\"createLabelVals\":[\"$LBL\"],\"negateLabelVals\":[]}}" -o "$tmp_body" 2>"$tmp_headers"

    # Extract the rate limit information from the headers
    LABEL_LIMIT_REMAINING=$(grep -i "ratelimit-remaining" "$tmp_headers" | awk '{print $3}' | tr -d '\r')
    LABEL_LIMIT_RESET=$(grep -i "ratelimit-reset" "$tmp_headers" | awk '{print $3}' | tr -d '\r')

    # Print the rate limit values (optional)
    # Print the rate limit values (optional)
    log "Rate Limit Remaining: $LABEL_LIMIT_REMAINING"
    log "Rate Limit Reset Time: $LABEL_LIMIT_RESET"

    # Capture the response body
    response=$(cat "$tmp_body" | tr -d '\n')

    # Clean up the temporary files
    rm "$tmp_headers" "$tmp_body"

}

# Creates a label on a post
function negate_post_label() {
    local URI=$1
    local CID=$2
    local LBL=$3

    # Create temporary files to store headers and body
    tmp_headers=$(mktemp)
    tmp_body=$(mktemp)

    curl -v 'https://blewit.us-west.host.bsky.network/xrpc/tools.ozone.moderation.emitEvent' \
        -H 'accept: */*' \
        -H 'accept-language: en-US,en;q=0.9' \
        -H 'atproto-accept-labelers: did:plc:ar7c4by46qjdydhdevvrndac;redact' \
        -H 'atproto-proxy: did:plc:e4elbtctnfqocyfcml6h2lf7#atproto_labeler' \
        -H 'Accept-Encoding: identity' \
        -H "authorization: Bearer $accessJwt" \
        -H 'content-type: application/json' \
        -H 'origin: https://ozone.mountainherder.xyz' \
        -H 'priority: u=1, i' \
        -H 'referer: https://ozone.mountainherder.xyz/' \
        --data-raw "{\"subject\":{\"\$type\":\"com.atproto.repo.strongRef\",\"uri\":\"$URI\",\"cid\":\"$CID\"},\"createdBy\":\"did:plc:e4elbtctnfqocyfcml6h2lf7\",\"subjectBlobCids\":[],\"event\":{\"\$type\":\"tools.ozone.moderation.defs#modEventLabel\",\"createLabelVals\":[],\"negateLabelVals\":[\"$LBL\"]}}" -o "$tmp_body" 2>"$tmp_headers"

    # Extract the rate limit information from the headers
    LABEL_LIMIT_REMAINING=$(grep -i "ratelimit-remaining" "$tmp_headers" | awk '{print $3}' | tr -d '\r')
    LABEL_LIMIT_RESET=$(grep -i "ratelimit-reset" "$tmp_headers" | awk '{print $3}' | tr -d '\r')

    # Print the rate limit values (optional)
    # Print the rate limit values (optional)
    log "Rate Limit Remaining: $LABEL_LIMIT_REMAINING"
    log "Rate Limit Reset Time: $LABEL_LIMIT_RESET"

    # Capture the response body
    response=$(cat "$tmp_body" | tr -d '\n')

    # Clean up the temporary files
    rm "$tmp_headers" "$tmp_body"

}

function report_profile() {
    local DID=$1 # Reported Profile DID
    local RSN=$2 # Reason for Report

    # Create temporary files to store headers and body
    tmp_headers=$(mktemp)
    tmp_body=$(mktemp)

    curl -v 'https://blewit.us-west.host.bsky.network/xrpc/com.atproto.moderation.createReport' \
        -H 'Content-Type: application/json' \
        -H 'Accept: application/json' \
        -H 'atproto-accept-labelers: did:plc:ar7c4by46qjdydhdevvrndac;redact' \
        -H "atproto-proxy: did:plc:e4elbtctnfqocyfcml6h2lf7#atproto_labeler" \
        -H 'Accept-Encoding: identity' \
        -H "authorization: Bearer $accessJwt" \
        --data-raw "{\"reasonType\":\"com.atproto.moderation.defs#reasonOther\",\"subject\":{\"\$type\":\"com.atproto.admin.defs#repoRef\",\"type\":\"account\",\"did\":\"$DID\"},\"reason\":\"$RSN\"}" -o "$tmp_body" 2>"$tmp_headers"

    # Extract the rate limit information from the headers
    LABEL_LIMIT_REMAINING=$(grep -i "ratelimit-remaining" "$tmp_headers" | awk '{print $3}' | tr -d '\r')
    LABEL_LIMIT_RESET=$(grep -i "ratelimit-reset" "$tmp_headers" | awk '{print $3}' | tr -d '\r')

    # Print the rate limit values (optional)
    # Print the rate limit values (optional)
    log "Rate Limit Remaining: $LABEL_LIMIT_REMAINING"
    log "Rate Limit Reset Time: $LABEL_LIMIT_RESET"

    # Capture the response body
    response=$(cat "$tmp_body" | tr -d '\n')

    # Clean up the temporary files
    rm "$tmp_headers" "$tmp_body"
}

# Update List for MAGA / Trump
function get_label_events() {
    local LBL=$1

    # Create temporary files to store headers and body
    tmp_headers=$(mktemp)
    tmp_body=$(mktemp)

    curl -v "https://blewit.us-west.host.bsky.network/xrpc/tools.ozone.moderation.queryEvents?limit=100&includeAllUserRecords=false&createdAfter=$(date -d "$date -1 days" +"%Y-%m-%d")T04:00:00.000Z&createdBefore=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")&addedLabels=$LBL&types=tools.ozone.moderation.defs%23modEventLabel" \
        -H "authorization: Bearer $accessJwt" \
        -H 'Accept: */*' \
        -H 'Accept-Encoding: identity' \
        -H 'Referer: https://ozone.mountainherder.xyz/' \
        -H 'atproto-proxy: did:plc:e4elbtctnfqocyfcml6h2lf7#atproto_labeler' \
        -H 'atproto-accept-labelers: did:plc:ar7c4by46qjdydhdevvrndac;redact' -o "$tmp_body" 2>"$tmp_headers"

    # Extract the rate limit information from the headers
    LABEL_LIMIT_REMAINING=$(grep -i "ratelimit-remaining" "$tmp_headers" | awk '{print $3}' | tr -d '\r')
    LABEL_LIMIT_RESET=$(grep -i "ratelimit-reset" "$tmp_headers" | awk '{print $3}' | tr -d '\r')

    # Print the rate limit values (optional)
    # Print the rate limit values (optional)
    log "Rate Limit Remaining: $LABEL_LIMIT_REMAINING"
    log "Rate Limit Reset Time: $LABEL_LIMIT_RESET"

    # Capture the response body
    response=$(cat "$tmp_body" | tr -d '\n')

    # Clean up the temporary files
    rm "$tmp_headers" "$tmp_body"

}

function add_list_item() {
    local list_id=$1
    local subject=$2
    local response

    # Create temporary files to store headers and body
    tmp_headers=$(mktemp)
    tmp_body=$(mktemp)

    curl -v 'https://blewit.us-west.host.bsky.network/xrpc/com.atproto.repo.createRecord' \
        -H 'atproto-accept-labelers: did:plc:ar7c4by46qjdydhdevvrndac;redact' \
        -H "authorization: Bearer $accessJwt" \
        -H 'Accept-Encoding: identity' \
        -H 'content-type: application/json' \
        -d "{
            \"collection\": \"app.bsky.graph.listitem\",
            \"repo\": \"did:plc:e4elbtctnfqocyfcml6h2lf7\",
            \"record\": {
                \"subject\": \"$subject\",
                \"list\": \"$list_id\",
                \"createdAt\": \"$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")\",
                \"\$type\": \"app.bsky.graph.listitem\"
            }
        }" >"$tmp_body" 2>"$tmp_headers"

    # Extract the rate limit information from the headers
    LABEL_LIMIT_REMAINING=$(grep -i "ratelimit-remaining" "$tmp_headers" | awk '{print $3}' | tr -d '\r')
    LABEL_LIMIT_RESET=$(grep -i "ratelimit-reset" "$tmp_headers" | awk '{print $3}' | tr -d '\r')

    # Capture the response body
    response=$(cat "$tmp_body" | tr -d '\n')

    # Clean up the temporary files
    rm "$tmp_headers" "$tmp_body"

}



