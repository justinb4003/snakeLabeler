log() {
    echo "$(date) [$process]: $*" | tee -a "$LOGPATH/$logfile"
}

# Function to check and handle rate limiting
check_rate_limit() {
    local LIMIT_REMAINING=$1
    local LIMIT_RESET=$2

    if [ "$LIMIT_REMAINING" -le 10 ]; then
        current_time=$(date +%s)
        wait_time=$((LIMIT_RESET - current_time))
        if [ "$wait_time" -gt 0 ]; then
            echo "Rate limit exceeded. Waiting for $wait_time seconds."
            sleep "$wait_time"
        fi
    fi
}

# Create label
function create_profile_label() {
    DID=$1
    LBL=$2

    # Create temporary files to store headers and body
    tmp_headers=$(mktemp)
    tmp_body=$(mktemp)

    curl -v 'https://blewit.us-west.host.bsky.network/xrpc/tools.ozone.moderation.emitEvent' \
        -H 'accept: */*' \
        -H 'accept-language: en-US,en;q=0.9' \
        -H 'atproto-accept-labelers: did:plc:ar7c4by46qjdydhdevvrndac;redact' \
        -H 'atproto-proxy: did:plc:e4elbtctnfqocyfcml6h2lf7#atproto_labeler' \
        -H "authorization: Bearer $accessJwt" \
        -H 'content-type: application/json' \
        -H 'origin: https://ozone.mountainherder.xyz' \
        -H 'priority: u=1, i' \
        -H 'referer: https://ozone.mountainherder.xyz/' \
        --data-raw "{\"subject\":{\"\$type\":\"com.atproto.admin.defs#repoRef\",\"did\":\"$DID\"},\"createdBy\":\"did:plc:e4elbtctnfqocyfcml6h2lf7\",\"subjectBlobCids\":[],\"event\":{\"\$type\":\"tools.ozone.moderation.defs#modEventLabel\",\"createLabelVals\":[\"$LBL\"],\"negateLabelVals\":[]}}"  -o "$tmp_body" 2> "$tmp_headers"

     # Extract the rate limit information from the headers
    LABEL_LIMIT_REMAINING=$(grep -i "ratelimit-remaining" "$tmp_headers" | awk '{print $3}' | tr -d '\r')
    LABEL_LIMIT_RESET=$(grep -i "ratelimit-reset" "$tmp_headers" | awk '{print $3}' | tr -d '\r')

    # Print the rate limit values (optional)
        # Print the rate limit values (optional)
    log "Rate Limit Remaining: $LABEL_LIMIT_REMAINING"
    log "Rate Limit Reset Time: $LABEL_LIMIT_RESET"

    # Capture the response body
    response=$(cat "$tmp_body" | tr -d '\n')

    # Clean up the temporary files
    rm "$tmp_headers" "$tmp_body"

}

# Handle Expiration
function expiredJWT_Check() {
    local error=$(echo "$1" | jq -r '.error')
    tokenExpired=0
    tokenInvalid=0
    if [ "$error" = "ExpiredToken" ]; then
        tokenExpired=1
        log "Token expired, refreshing tokens."
        # Refresh the tokens
        auth=$(curl -s -X POST 'https://blewit.us-west.host.bsky.network/xrpc/com.atproto.server.refreshSession' \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $refreshJwt")

        # Update tokens
        accessJwt=$(echo "$auth" | jq -r '.accessJwt')
        refreshJwt=$(echo "$auth" | jq -r '.refreshJwt')
    fi
    if [ "$error" = "InvalidToken" ]; then
        log "Token invalid, Authenticating with Bluesky."

        # Refresh the tokens
        auth "$BLUESKY_HANDLE" "$BLUESKY_APP_PASSWORD"
    fi
}

# Get profiles
function get_profiles {
    local DIDLIST=$1
    local process="GET_PROFILES"
    local params=$(echo "$DIDLIST" | jq -r 'map("actors=" + .[]) | join("&")')

    # Create temporary files to store headers and body
    tmp_headers=$(mktemp)
    tmp_body=$(mktemp)

    curl -v "https://blewit.us-west.host.bsky.network/xrpc/app.bsky.actor.getProfiles?$params" \
        -H "authorization: Bearer $accessJwt" \
        -H 'accept: application/json' -o "$tmp_body" 2> "$tmp_headers"

     # Extract the rate limit information from the headers
    LABEL_LIMIT_REMAINING=$(grep -i "ratelimit-remaining" "$tmp_headers" | awk '{print $3}' | tr -d '\r')
    LABEL_LIMIT_RESET=$(grep -i "ratelimit-reset" "$tmp_headers" | awk '{print $3}' | tr -d '\r')

    # Print the rate limit values (optional)
        # Print the rate limit values (optional)
    log "Rate Limit Remaining: $LABEL_LIMIT_REMAINING"
    log "Rate Limit Reset Time: $LABEL_LIMIT_RESET"

    # Capture the response body
    response=$(cat "$tmp_body" | tr -d '\n')

    # Clean up the temporary files
    rm "$tmp_headers" "$tmp_body"
}

# Process users
function process_users {
    local process="PROCESS_USERS"

    log "Processing users from $start to $end."

    if [ "$end" -ge "$length" ]; then
        end="$length"
    fi

    dids=$(duckdb "$DATABASE" -json -c "
                    SELECT DISTINCT did
                    FROM unique_dids
                    WHERE rowid BETWEEN ${start} AND ${end};
            ")

    start=$((start + 25))
    end=$((end + 25))

    check_rate_limit "$LABEL_LIMIT_REMAINING" "$LABEL_LIMIT_RESET"

    get_profiles "$dids"

    error=$(echo "$response" | jq -r '.error')
    if [ "$error" = "ExpiredToken" ]; then
        log "Token expired, refreshing tokens."
        # Refresh the tokens
        reAuth "$refreshJwt"

        get_profiles "$dids"
    fi

    profiles=$(echo "$response" | jq -r '.profiles')
    echo "$profiles" | jq -c '.[]' | while read -r profile; do
        did=$(echo "$profile" | jq -r '.did')
        displayName=$(echo "$profile" | jq -r '.displayName' | tr -d '\n' | tr "\x27" " " | tr "\x22" " ")
        description=$(echo "$profile" | jq -r '.description' | tr -d '\n' | tr "\x27" " " | tr "\x22" " ")
        labelYN=$(echo "$profile" | jq -r 'has("labels")')
        if [ "$labelYN" = "false" ]; then
            labels="NA"
        else
            labels=$(echo "$profile" | jq -r '[.labels[].val] | join("|")')
        fi

        zeta=0
        hammer_sickle=0
        triangle=0
        swastika=0

        # Zeta
        if echo "$displayName" | grep -iE 'ζ' >/dev/null; then
            zeta=1
            log "Flagged DID: $did with $displayName."
        elif echo "$description" | grep -iE 'ζ' >/dev/null; then
            zeta=1
            log "Flagged DID: $did with $description."
        fi

        if [ "$zeta" -eq 1 ]; then
            duckdb "$DATABASE" -c "
                    INSERT INTO reports
                        VALUES ('${did}', '${displayName}', '${description}', '${labels}', 'zeta',  '$(date +"%Y-%m-%d %H:%M:%S%z")');
                    "
        fi

        # Hammer and Sickle
        if echo "$displayName" | grep -iE '☭' >/dev/null; then
            hammer_sickle=1
            log "Flagged DID: $did with $displayName."
        elif echo "$description" | grep -iE '☭' >/dev/null; then
            hammer_sickle=1
            log "Flagged DID: $did with $description."
        fi

        if [ "$hammer_sickle" -eq 1 ]; then
            duckdb "$DATABASE" -c "
                    INSERT INTO reports
                        VALUES ('${did}', '${displayName}', '${description}', '${labels}', 'hammer-sickle', '$(date +"%Y-%m-%d %H:%M:%S%z")');
                    "
        fi

        # Triangle
        if echo "$displayName" | grep -iE '🔻' >/dev/null; then
            triangle=1
            log "Flagged DID: $did with $displayName."
        elif echo "$description" | grep -iE '🔻' >/dev/null; then
            triangle=1
            log "Flagged DID: $did with $description."
        fi

        if [ "$triangle" -eq 1 ]; then
            duckdb "$DATABASE" -c "
                    INSERT INTO reports
                        VALUES ('${did}', '${displayName}', '${description}', '${labels}', 'triangle',  '$(date +"%Y-%m-%d %H:%M:%S%z")');
                    "
        fi

        # Swastika
        if echo "$displayName" | grep -iE '卐' >/dev/null; then
            swastika=1
            log "Flagged DID: $did with $displayName."
        elif echo "$description" | grep -iE '卐' >/dev/null; then
            swastika=1
            log "Flagged DID: $did with $description."
        fi

        if [ "$swastika" -eq 1 ]; then
            duckdb "$DATABASE" -c "
                    INSERT INTO reports
                        VALUES ('${did}', '${displayName}', '${description}', '${labels}', 'swastika',  '$(date +"%Y-%m-%d %H:%M:%S%z")');
                    "
        fi
    done
}

# Get Post Record
function get_post_record() {
    DID=$1
    RKEY=$2

    curl "https://blewit.us-west.host.bsky.network/xrpc/com.atproto.repo.getRecord?repo=$DID&collection=app.bsky.feed.post&rkey=$RKEY" \
        -H 'content-type: application/json'
}

# Creates a label on a post
function create_label() {
    URI=$1
    CID=$2
    LBL=$3

    # Create temporary files to store headers and body
    tmp_headers=$(mktemp)
    tmp_body=$(mktemp)

    curl -v 'https://blewit.us-west.host.bsky.network/xrpc/tools.ozone.moderation.emitEvent' \
        -H 'accept: */*' \
        -H 'accept-language: en-US,en;q=0.9' \
        -H 'atproto-accept-labelers: did:plc:ar7c4by46qjdydhdevvrndac;redact' \
        -H 'atproto-proxy: did:plc:e4elbtctnfqocyfcml6h2lf7#atproto_labeler' \
        -H "authorization: Bearer $accessJwt" \
        -H 'content-type: application/json' \
        -H 'origin: https://ozone.mountainherder.xyz' \
        -H 'priority: u=1, i' \
        -H 'referer: https://ozone.mountainherder.xyz/' \
        --data-raw "{\"subject\":{\"\$type\":\"com.atproto.repo.strongRef\",\"uri\":\"$URI\",\"cid\":\"$CID\"},\"createdBy\":\"did:plc:e4elbtctnfqocyfcml6h2lf7\",\"subjectBlobCids\":[],\"event\":{\"\$type\":\"tools.ozone.moderation.defs#modEventLabel\",\"createLabelVals\":[\"$LBL\"],\"negateLabelVals\":[]}}"  -o "$tmp_body" 2> "$tmp_headers"

     # Extract the rate limit information from the headers
    LABEL_LIMIT_REMAINING=$(grep -i "ratelimit-remaining" "$tmp_headers" | awk '{print $3}' | tr -d '\r')
    LABEL_LIMIT_RESET=$(grep -i "ratelimit-reset" "$tmp_headers" | awk '{print $3}' | tr -d '\r')

    # Print the rate limit values (optional)
        # Print the rate limit values (optional)
    log "Rate Limit Remaining: $LABEL_LIMIT_REMAINING"
    log "Rate Limit Reset Time: $LABEL_LIMIT_RESET"

    # Capture the response body
    response=$(cat "$tmp_body" | tr -d '\n')

    # Clean up the temporary files
    rm "$tmp_headers" "$tmp_body"

}

# Creates a label on a post
function negate_post_label() {
    URI=$1
    CID=$2
    LBL=$3

    # Create temporary files to store headers and body
    tmp_headers=$(mktemp)
    tmp_body=$(mktemp)

    curl -v 'https://blewit.us-west.host.bsky.network/xrpc/tools.ozone.moderation.emitEvent' \
        -H 'accept: */*' \
        -H 'accept-language: en-US,en;q=0.9' \
        -H 'atproto-accept-labelers: did:plc:ar7c4by46qjdydhdevvrndac;redact' \
        -H 'atproto-proxy: did:plc:e4elbtctnfqocyfcml6h2lf7#atproto_labeler' \
        -H "authorization: Bearer $accessJwt" \
        -H 'content-type: application/json' \
        -H 'origin: https://ozone.mountainherder.xyz' \
        -H 'priority: u=1, i' \
        -H 'referer: https://ozone.mountainherder.xyz/' \
        --data-raw "{\"subject\":{\"\$type\":\"com.atproto.repo.strongRef\",\"uri\":\"$URI\",\"cid\":\"$CID\"},\"createdBy\":\"did:plc:e4elbtctnfqocyfcml6h2lf7\",\"subjectBlobCids\":[],\"event\":{\"\$type\":\"tools.ozone.moderation.defs#modEventLabel\",\"createLabelVals\":[],\"negateLabelVals\":[\"$LBL\"]}}"  -o "$tmp_body" 2> "$tmp_headers"

     # Extract the rate limit information from the headers
    LABEL_LIMIT_REMAINING=$(grep -i "ratelimit-remaining" "$tmp_headers" | awk '{print $3}' | tr -d '\r')
    LABEL_LIMIT_RESET=$(grep -i "ratelimit-reset" "$tmp_headers" | awk '{print $3}' | tr -d '\r')

    # Print the rate limit values (optional)
        # Print the rate limit values (optional)
    log "Rate Limit Remaining: $LABEL_LIMIT_REMAINING"
    log "Rate Limit Reset Time: $LABEL_LIMIT_RESET"

    # Capture the response body
    response=$(cat "$tmp_body" | tr -d '\n')

    # Clean up the temporary files
    rm "$tmp_headers" "$tmp_body"

}